import re
from config import BOT_TOKEN, OWNER_ID, ADMIN_IDS, ADMIN_ESTER, ADMINISTRATION, ALL_ADMINS
from aiogram.filters import Command, or_f, StateFilter
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, InputFile
from db import ( 
    check_user_role, add_user_role, add_course, add_lesson, update_homework_status,
    update_course_title, update_course_description, get_all_courses, get_next_lesson,
    update_lesson_title, update_lesson_video, delete_course_and_lessons, notify_admin_about_homework,
    update_lesson_homework, update_lesson_extra_material_file, get_user_by_id, get_next_course_for_user,
    update_lesson_extra_material_link, delete_lesson_by_id, UserLesson, Lesson, get_course_by_lesson,
    get_lessons_by_course, get_course_by_id, approve_course_by_id, save_homework, 
    update_course_lesson_count, initialize_user_lessons, get_available_courses_for_user,
    get_first_lesson, create_or_update_user_lesson, submit_homework, approve_homework, 
    send_homework_for_redo, get_lesson_workbook, get_lesson_extra_materials, get_user_lesson_in_progress,
    check_homework, SessionLocal, get_first_course, get_lesson_by_id, update_user_lesson_status )
from welcome_message import welcome_parts
import asyncio
from asyncio import sleep
from aiogram.fsm.storage.memory import MemoryStorage
import logging
from aiogram import Router
from aiogram.enums import ParseMode

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
pending_requests = {}

storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

print(f'Bot started ')
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    role = check_user_role(message.from_user.id)
    if role == "owner":
        await message.answer( f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–∞—à–∞ —Ä–æ–ª—å: {role}",
        )
    elif role == "admin":
        await message.answer(f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–∞—à–∞ —Ä–æ–ª—å: {role}")
    elif role == "user":
        await message.answer(f"–°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑. –°–∏–∑ –∫–∞—Ç–Ω–∞—à—É–≤—á–∏—Å–∏–∑")
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Ruxsat so'rash", callback_data="request_access")]
        ])
        await message.answer(
            f"–°–∞–ª–æ–º, {message.from_user.full_name}! –ò–ª—Ç–∏–º–æ—Å, –º–∞—ä–º—É—Ä–∏—è—Ç–¥–∞–Ω —Ä—É—Ö—Å–∞—Ç —Å—û—Ä–∞–Ω–≥.",
            reply_markup=kb
        )

@dp.message(Command("menu"))
async def menu_command(message: Message):
    print("TRIGGERED /menu")
    print("Text:", repr(message.text))
    print("From ID:", message.from_user.id)
    print("Role:", check_user_role(message.from_user.id))

    user_id = message.from_user.id
    if user_id in tuple(ADMINISTRATION.values()):
        text = (
            "<b>–ú–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n"
            "/add_course ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å\n"
            "/edit_course ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å\n"
            "/delete_course ‚Äî —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å\n"
            "/add_lesson ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
            "/delete_lesson ‚Äî —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫\n"
            "/courses ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤\n"
            "/sync_lessons ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤\n"
            "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –µ–≥–æ —Ä–æ–ª—å
        role = check_user_role(user_id)
        if role == "user":
            text = (
                "<b>–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤.\n"
                "/courses ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤\n"
                "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
            )
        else:
            text = (
                "–°–∏–∑–¥–∞ —Ä—É—Ö—Å–∞—Ç –π—û“õ. –ò–ª—Ç–∏–º–æ—Å, —Ä—É—Ö—Å–∞—Ç–Ω–∏ –º–∞—ä–º—É—Ä–∏—è—Ç–¥–∞–Ω —Å—û—Ä–∞–Ω–≥."
            )
    await message.answer(text)

async def on_startup(dispatcher):
    await sync_lessons_auto()
async def sync_lessons_auto():
    courses = get_all_courses()
    for course in courses:
        actual_count = len(get_lessons_by_course(course["id"]))
        if course["lesson_count"] != actual_count:
            update_course_lesson_count(course["id"], actual_count)

async def send_welcome_message(bot: Bot, user_id: int):
    for part in welcome_parts:
        await bot.send_chat_action(user_id, ChatAction.TYPING)
        await asyncio.sleep(1.5)
        await bot.send_message(user_id, part)
        await asyncio.sleep(3)

class AccessRequest(StatesGroup):
    waiting_for_name = State()
@dp.callback_query(F.data == "request_access")
async def handle_request_access(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–ò–ª—Ç–∏–º–æ—Å, —Ä—É—Ö—Å–∞—Ç —Å—û—Ä–∞—à —É—á—É–Ω —Ç—û–ª–∏“õ –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await state.set_state(AccessRequest.waiting_for_name)
    await callback.answer()
@dp.message(AccessRequest.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    fio = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    await state.update_data(fio=fio, username=username)
    pending_requests[user_id] = {"fio": fio, "username": username}
    kb_1 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"make_admin_{user_id}")],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º", callback_data=f"make_user_{user_id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")]
    ])
    kb_2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º", callback_data=f"make_user_{user_id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")]
    ])
    
    
    for admin_id in ALL_ADMINS:
        kb = kb_1 if admin_id == OWNER_ID else kb_2
        await bot.send_message(
            admin_id,
            f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç {fio} (@{username})\nID: <code>{user_id}</code>",
            reply_markup=kb
        )

    await message.answer("‚úÖ –°–∏–∑–Ω–∏–Ω–≥ —Å—û—Ä–æ–≤–∏–Ω–≥–∏–∑ –º–∞—ä–º—É—Ä–∏—è—Ç–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏, —Ç–∞—Å–¥–∏“õ–Ω–∏ –∫—É—Ç–∏–Ω–≥.")
    await state.clear()

class UserRegistration:
    
    def __init__(self, bot):
        self.bot = bot
        self.lesson_flow = LessonFlow(bot)
    
    async def approve_user(self, callback: CallbackQuery):
        await callback.answer()

        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(callback.data.split("_")[2])
        req = pending_requests.pop(user_id, None)
        fio = req["fio"] if req else "–ë–µ–∑ –§–ò–û"
        username = req["username"] if req else ""

        add_user_role(user_id, fio, username, "user")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self.bot.send_message(
            user_id, 
            f"üéâ –¢–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑! –°–∏–∑ —Ç–∞–ª–∞–±–∞–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–¥–∞—Å–∏–∑, {fio}."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if callback.from_user.id == OWNER_ID:
            await callback.message.answer(f"‚úÖ –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fio}.")
        else:
            await self.bot.send_message(
                OWNER_ID,
                f"üë§ –ê–¥–º–∏–Ω {callback.from_user.full_name} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø {fio}"
            )
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.")

        await send_welcome_message(self.bot, user_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞
        course = get_first_course()
        lessons = get_lessons_by_course(course["id"])
        if lessons:
            first_lesson = lessons[0]
            create_or_update_user_lesson(user_id, first_lesson["id"], "in_progress")
            
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöÄ –ë–æ—à–ª–∞—à", 
                    callback_data=f"start_lesson_{first_lesson['id']}"
                )]
            ])
            await self.bot.send_message(
                user_id, 
                "–î–∞—Ä—Å–Ω–∏ –±–æ—à–ª–∞—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:", 
                reply_markup=kb
            )

class HomeworkType(StatesGroup):
    choosing_type = State()
    waiting_for_text = State()
    waiting_for_file = State()

class LessonFlow:
    def __init__(self, bot):
        self.bot = bot

    async def start_lesson(self, user_id: int, lesson_id: int):
        lesson = get_lesson_by_id(lesson_id)
        if not lesson:
            await self.bot.send_message(user_id, "–î–∞—Ä—Å —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            return

        if lesson.get("workbook"):
            await self.bot.send_document(user_id, document=lesson["workbook"])

        if lesson.get("video_file_id"):
            try:
                await self.bot.send_video(
                    user_id,
                    video=lesson["video_file_id"],
                    caption="üé• –î–∞—Ä—Å –≤–∏–¥–µ–æ—Å–∏:"
                )
            except TelegramBadRequest as e:
                await self.bot.send_message(user_id, "‚ùó –í–∏–¥–µ–æ —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –∞–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–∏–Ω–≥.")
                for admin_id in tuple(ADMINISTRATION.values()):
                    await self.bot.send_message(
                        admin_id,
                        f"‚ùå –í–∏–¥–µ–æ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ:\n"
                        f"üë§ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏: [{user_id}](tg://user?id={user_id})\n"
                        f"üìö –î–∞—Ä—Å ID: {lesson['id']}\n"
                        f"üé¨ video_file_id: {lesson['video_file_id']}\n"
                        f"üí• –•–∞—Ç–æ–ª–∏–∫: {e.message}",
                        parse_mode="Markdown"
                    )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üì∫ –ö—û—Ä–∏–ª–¥–∏",
                    callback_data=f"video_watched_{lesson_id}"
                )]
            ])
            await self.bot.send_message(
                user_id,
                "–ê–≥–∞—Ä –≤–∏–¥–µ–æ–Ω–∏ –∫—û—Ä–≥–∞–Ω –±—û–ª—Å–∞–Ω–≥–∏–∑, —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
                reply_markup=keyboard
            )
            update_user_lesson_status(user_id, lesson_id, "video_not_watched")
        else:
            await self.bot.send_message(user_id, "–í–∏–¥–µ–æ –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")

    async def handle_video_watched(self, callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        lesson_id = int(callback.data.split("_")[-1])
        lesson = get_lesson_by_id(lesson_id)

        update_user_lesson_status(user_id, lesson_id, "video_watched")

        if lesson.get("homework"):
            await self.bot.send_message(
                user_id, 
                f"üìö –£–π –≤–∞–∑–∏—Ñ–∞—Å–∏: {lesson['homework']}"
            )

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data=f"homework_text_{lesson_id}"),
                    InlineKeyboardButton(text="üìÑ –§–∞–π–ª", callback_data=f"homework_file_{lesson_id}")
                ]
            ])
            await self.bot.send_message(
                user_id,
                "“ö–∞–Ω–¥–∞–π —à–∞–∫–ª–¥–∞ —É–π –≤–∞–∑–∏—Ñ–∞—Å–∏–Ω–∏ —é–±–æ—Ä–º–æ“õ—á–∏—Å–∏–∑?",
                reply_markup=kb
            )


    async def choose_homework_text(self, callback: CallbackQuery, state: FSMContext):
        lesson_id = int(callback.data.split("_")[-1])
        await state.update_data(lesson_id=lesson_id)
        await callback.message.answer("üìù –ò–ª—Ç–∏–º–æ—Å, –º–∞—Ç–Ω –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ —É–π –≤–∞–∑–∏—Ñ–∞—Å–∏–Ω–∏ —ë–∑–∏–Ω–≥:")
        await state.set_state(HomeworkType.waiting_for_text)
        await callback.answer()

    async def choose_homework_file(self, callback: CallbackQuery, state: FSMContext):
        lesson_id = int(callback.data.split("_")[-1])
        await state.update_data(lesson_id=lesson_id)
        await callback.message.answer("üìÑ –ò–ª—Ç–∏–º–æ—Å, —Ñ–∞–π–ª–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:")
        await state.set_state(HomeworkType.waiting_for_file)
        await callback.answer()

    async def receive_homework_text(self, message: Message, state: FSMContext):
        data = await state.get_data()
        user_id = message.from_user.id
        lesson_id = data["lesson_id"]

        save_homework(user_id, lesson_id, message.text, None)
        update_user_lesson_status(user_id, lesson_id, "submitted")

        await message.answer("‚úÖ –ú–∞—Ç–Ω “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.")
        await notify_admin_about_homework(self.bot, user_id, lesson_id, text=message.text)
        await state.clear()

    async def receive_homework_file(self, message: Message, state: FSMContext):
        data = await state.get_data()
        user_id = message.from_user.id
        lesson_id = data["lesson_id"]

        file_id = message.document.file_id
        save_homework(user_id, lesson_id, None, file_id)
        update_user_lesson_status(user_id, lesson_id, "submitted")

        await message.answer("‚úÖ –§–∞–π–ª “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.")
        await notify_admin_about_homework(self.bot, user_id, lesson_id, file_id=file_id)
        await state.clear()
    
    if lesson.get("extra_material_link"):
        await self.bot.send_message(user_id, f"üìé “ö—û—à–∏–º—á–∞ “≥–∞–≤–æ–ª–∞:\n{lesson['extra_material_link']}")

    if lesson.get("extra_material_file"):
        await self.bot.send_document(user_id, document=lesson["extra_material_file"])

registration = UserRegistration(bot)
lesson_flow = LessonFlow(bot)

@dp.callback_query(F.data.startswith("start_lesson_"))
async def cb_start_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split("_")[-1])
    await lesson_flow.start_lesson(callback.from_user.id, lesson_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("video_watched_"))
async def cb_video_watched(callback: CallbackQuery, state: FSMContext):
    await lesson_flow.handle_video_watched(callback, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("homework_text_"))
async def cb_homework_text(callback: CallbackQuery, state: FSMContext):
    await lesson_flow.choose_homework_text(callback, state)

@dp.callback_query(F.data.startswith("homework_file_"))
async def cb_homework_file(callback: CallbackQuery, state: FSMContext):
    await lesson_flow.choose_homework_file(callback, state)

@dp.message(HomeworkType.waiting_for_text)
async def msg_homework_text(message: Message, state: FSMContext):
    await lesson_flow.receive_homework_text(message, state)

@dp.message(HomeworkType.waiting_for_file, F.document)
async def msg_homework_file(message: Message, state: FSMContext):
    await lesson_flow.receive_homework_file(message, state)

@dp.callback_query(F.data.startswith("make_user_"))
async def make_user_handler(callback: CallbackQuery):
    await registration.approve_user(callback)

async def notify_admin_about_homework(bot, user_or_id, lesson_id, text=None, file_id=None):
    if isinstance(user_or_id, int):
        user = await bot.get_chat(user_or_id)
    else:
        user = user_or_id

    user_id = user.id  # ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

    full_name = user.full_name or f"ID {user.id}"
    username = f"(@{user.username})" if user.username else ""
    user_link = f"<a href='tg://user?id={user.id}'>{full_name}</a> {username}"

    lesson = get_lesson_by_id(lesson_id)
    lesson_title = lesson.get("title", f"ID {lesson_id}")

    caption = (
        f"üì• <b>–Ø–Ω–≥–∏ —É–π –≤–∞–∑–∏—Ñ–∞—Å–∏!</b>\n"
        f"üë§ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏: {user_link}\n"
        f"üìö –î–∞—Ä—Å: <b>{lesson_title}</b>\n"
    )

    if text:
        # escape '<' and '>' from text
        safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
        caption += f"\nüìù –ñ–∞–≤–æ–±:\n{safe_text}"


    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_hw_{user_id}_{lesson_id}"),
            InlineKeyboardButton(text="üîÅ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"redo_hw_{user_id}_{lesson_id}")
        ]
    ])

    for admin_id in ALL_ADMINS:
        if not admin_id:
            continue
        try:
            if file_id:
                await bot.send_document(
                    admin_id,
                    document=file_id,
                    caption=caption,
                    parse_mode="html",
                    reply_markup=keyboard
                )
            else:
                await bot.send_message(
                    admin_id,
                    caption,
                    parse_mode="html",
                    reply_markup=keyboard
                )
        except Exception as e:
            print(f"‚ùó –ê–¥–º–∏–Ω–≥–∞ {admin_id} —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏: {e}")


class HomeworkStates(StatesGroup):
    awaiting_redo_comment = State()
@dp.callback_query(F.data.startswith("approve_hw_"))
async def approve_hw_handler(callback: CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[2])
    lesson_id = int(parts[3])

    approve_homework(user_id, lesson_id)

    # –û–±–Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç —É –∞–¥–º–∏–Ω–∞
    try:
        await callback.message.edit_caption(
            caption=callback.message.caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ.",
            parse_mode="Markdown"
        )
    except Exception:
        await callback.message.answer("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ.")

    next_lesson = get_next_lesson(user_id, lesson_id)

    if next_lesson:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        create_or_update_user_lesson(user_id, next_lesson["id"], "in_progress")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚û°Ô∏è –ö–µ–π–∏–Ω–≥–∏ –¥–∞—Ä—Å",
                callback_data=f"start_lesson_{next_lesson['id']}"
            )]
        ])
        await callback.bot.send_message(
            user_id,
            f"üìö –ö–µ–π–∏–Ω–≥–∏ –¥–∞—Ä—Å —Ç–∞–π—ë—Ä: {next_lesson['title']}",
            reply_markup=kb
        )

    else:
        # –£—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å
        current_course = get_course_by_lesson(lesson_id)
        next_course = get_next_course_for_user(user_id, current_course["id"])

        if next_course:
            lessons = get_lessons_by_course(next_course["id"])
            if lessons:
                first_lesson = lessons[0]
                create_or_update_user_lesson(user_id, first_lesson["id"], "in_progress")

                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üöÄ –Ø–Ω–≥–∏ –∫—É—Ä—Å–Ω–∏ –±–æ—à–ª–∞—à",
                        callback_data=f"start_lesson_{first_lesson['id']}"
                    )]
                ])
                await callback.bot.send_message(
                    user_id,
                    f"üéì –¢–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑! –°–∏–∑ —è–Ω–≥–∏ –∫—É—Ä—Å–≥–∞ —û—Ç–¥–∏–Ω–≥–∏–∑: {next_course['title']}",
                    reply_markup=kb
                )
                
    await callback.answer("–£—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç.")
@dp.callback_query(F.data.startswith("redo_hw_"))
async def redo_hw_prompt(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    await state.update_data(user_id=int(parts[2]), lesson_id=int(parts[3]))

    await callback.message.answer("‚úèÔ∏è –ò–ª—Ç–∏–º–æ—Å, –∏–∑–æ“≥ “õ–æ–ª–¥–∏—Ä–∏–Ω–≥ (—Å–∞–±–∞–±):")
    await state.set_state(HomeworkStates.awaiting_redo_comment)
    print(f"1. [FSM] Current state: {await state.get_data()}")
    await callback.answer()
@dp.message(StateFilter(HomeworkStates.awaiting_redo_comment))
async def redo_hw_comment_handler(message: Message, state: FSMContext):

    data = await state.get_data()
    print(f"2. [FSM] Current state: {data}")
    user_id = data["user_id"]
    lesson_id = data["lesson_id"]
    comment = message.text

    send_homework_for_redo(user_id, lesson_id, comment)

    await message.bot.send_message(
        user_id,
        f"üîÅ –£–π –≤–∞–∑–∏—Ñ–∞–Ω–≥–∏–∑ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏—à —É—á—É–Ω “õ–∞–π—Ç–∞—Ä–∏–ª–¥–∏.\nüí¨ –ò–∑–æ“≥: {comment}"
    )

    await message.answer("üì® –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏.")
    await state.clear()


@dp.message(Command("sync_lessons"))
async def sync_lessons_count(message: Message):
    user_id = message.from_user.id
    if user_id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    courses = get_all_courses()
    fixed = 0
    for course in courses:
        actual_count = len(get_lessons_by_course(course["id"]))
        if course["lesson_count"] != actual_count:
            update_course_lesson_count(course["id"], actual_count)
            fixed += 1

    await message.answer(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {fixed}")

@dp.callback_query(F.data.startswith("make_admin_"))
async def make_admin(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    req = pending_requests.pop(user_id, None)
    fio = req["fio"] if req else "–ë–µ–∑ –§–ò–û"
    username = req["username"] if req else ""

    add_user_role(user_id, fio, username, "admin")
    await bot.send_message(user_id, f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, –∞–¥–º–∏–Ω {fio}!")

    if callback.from_user.id in tuple(ADMINISTRATION.values()):
        await callback.message.answer(f"‚úÖ –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fio}.")
    else:
        await bot.send_message(OWNER_ID, f"üë§ –ê–¥–º–∏–Ω {callback.from_user.full_name} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fio}.")
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^decline_\d+$"))
async def decline_request(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    req = pending_requests.pop(user_id, None)
    fio = req["fio"] if req else f"ID {user_id}"
    await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ü–∏–∏.")
    await callback.message.answer(f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {fio} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer()

    
class CourseCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_number_course = State()
    waiting_for_lesson_count = State()
    waiting_for_lesson_title = State()
    waiting_for_lesson_video = State()
    waiting_for_homework = State()
    waiting_for_extra_material_link = State()
    waiting_for_extra_material_file = State()
@dp.message(Command("add_course"))
async def start_course_creation(message: Message, state: FSMContext):
    logging.info(f"Received /add_course from {message.from_user.id}")
    user_id = message.from_user.id
    if user_id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(CourseCreation.waiting_for_title)
@dp.message(CourseCreation.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ ¬´-¬ª):")
    await state.set_state(CourseCreation.waiting_for_description)
@dp.message(CourseCreation.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if description == "-":
        description = ""
    await state.update_data(description=description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –ø–æ —Å—á–µ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3...):")
    await state.set_state(CourseCreation.waiting_for_number_course)
@dp.message(CourseCreation.waiting_for_number_course)
async def process_number_course(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return
    await state.update_data(number_course=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π:")
    await state.set_state(CourseCreation.waiting_for_lesson_count)
@dp.message(CourseCreation.waiting_for_lesson_count)
async def process_lesson_count(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    count = int(message.text)
    await state.update_data(lesson_total=count, lessons=[], lesson_index=0)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è 1 –∏–∑ {count}:")
    await state.set_state(CourseCreation.waiting_for_lesson_title)
@dp.message(CourseCreation.waiting_for_lesson_title)
async def process_lesson_title(message: Message, state: FSMContext):
    data = await state.get_data()
    lesson_index = data["lesson_index"]
    lessons = data["lessons"]

    lessons.append({
        "title": message.text.strip(),
        "video": None,
        "homework": None,
        "extra_material_file": None,
        "extra_material_link": None
    })
    await state.update_data(lessons=lessons)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∫ —ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—é –∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
    await state.set_state(CourseCreation.waiting_for_lesson_video)
@dp.message(CourseCreation.waiting_for_lesson_video)
async def process_lesson_video(message: Message, state: FSMContext):
    if message.text and message.text.strip() == "-":
        data = await state.get_data()
        lesson_index = data["lesson_index"]
        lessons = data["lessons"]
        lessons[lesson_index]["video"] = None
        await state.update_data(lessons=lessons)

        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:")
        await state.set_state(CourseCreation.waiting_for_homework)
        return

    if not message.video:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return

    data = await state.get_data()
    lesson_index = data["lesson_index"]
    lessons = data["lessons"]

    lessons[lesson_index]["video"] = message.video.file_id
    await state.update_data(lessons=lessons)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(CourseCreation.waiting_for_homework)
@dp.message(CourseCreation.waiting_for_homework)
async def process_homework_text(message: Message, state: FSMContext):
    data = await state.get_data()
    lesson_index = data["lesson_index"]
    lessons = data["lessons"]

    lessons[lesson_index]["homework"] = message.text.strip()
    await state.update_data(lessons=lessons)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    await state.set_state(CourseCreation.waiting_for_extra_material_link)  
@dp.message(CourseCreation.waiting_for_extra_material_link)
async def ask_extra_material_link(message: Message, state: FSMContext):
    data = await state.get_data()
    lesson_index = data["lesson_index"]
    lessons = data["lessons"]

    if message.text and message.text.strip() == "-":
        lessons[lesson_index]["extra_material_link"] = None
    else:
        lessons[lesson_index]["extra_material_link"] = message.text.strip()
    await state.update_data(lessons=lessons)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.docx, .pdf –∏ —Ç.–¥.) –∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(CourseCreation.waiting_for_extra_material_file)
@dp.message(CourseCreation.waiting_for_extra_material_file)
async def process_extra_material_file(message: Message, state: FSMContext):
    data = await state.get_data()
    lessons = data["lessons"]
    lesson_index = data["lesson_index"]

    file_id = None
    if message.document:
        file_id = message.document.file_id
    elif message.text and message.text.strip() == "-":
        file_id = None
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return

    lessons[lesson_index]["extra_material_file"] = file_id
    await state.update_data(lessons=lessons)

    await finalize_homework(message, state)
async def finalize_homework(message: Message, state: FSMContext):
    data = await state.get_data()
    lesson_index = data["lesson_index"]
    lessons = data["lessons"]

    await state.update_data(lessons=lessons)

    if lesson_index + 1 < data["lesson_total"]:
        await state.update_data(
            lesson_index=lesson_index + 1,
            homework=None,
            extra_material_link=None,
            extra_material_file=None
        )
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è {lesson_index + 2} –∏–∑ {data['lesson_total']}:")
        await state.set_state(CourseCreation.waiting_for_lesson_title)
    else:
        await save_course_to_db(message.from_user.id, state)
        await state.clear()

def get_lesson_buttons(course_id):
    lessons = get_lessons_by_course(course_id)
    return [
        [InlineKeyboardButton(text=f"–£—Ä–æ–∫ {i+1}: {lesson['title']}", callback_data=f"view_lesson_{course_id}_{i}")]
        for i, lesson in enumerate(lessons)
    ]
async def save_course_to_db(user_id: int, state: FSMContext):
    data = await state.get_data()
    approved = False
    lesson_count = data["lesson_total"]

    course_id = add_course(
        data["title"], 
        data["description"], 
        lesson_count, 
        user_id, 
        approved, 
        data.get("number_course") 
    )

    for lesson in data["lessons"]:
        add_lesson(
            course_id,
            lesson["title"],
            lesson.get("video") or lesson.get("video_file_id"),             
            lesson["homework"],
            lesson["extra_material_file"],
            lesson["extra_material_link"]
        )

    await bot.send_message(user_id, f"‚úÖ –ö—É—Ä—Å \"{data['title']}\" —Å–æ—Ö—Ä–∞–Ω—ë–Ω (—Å—Ç–∞—Ç—É—Å: –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏).")

    lesson_buttons = get_lesson_buttons(course_id)

    action_buttons = [[
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"approve_course_{course_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_course_{course_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_course_{course_id}")
    ]]

    markup = InlineKeyboardMarkup(inline_keyboard=lesson_buttons + action_buttons)

    await bot.send_message(
        OWNER_ID,
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞.",
        reply_markup=markup
    )

@dp.callback_query(F.data.regexp(r"^view_lesson_\d+_\d+$"))
async def view_lesson(callback: CallbackQuery):
    _, _, course_id, lesson_idx = callback.data.split("_")
    lessons = get_lessons_by_course(int(course_id))
    idx = int(lesson_idx)
    if idx < 0 or idx >= len(lessons):
        await callback.message.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    lesson = lessons[idx]
    await callback.message.answer(f"<b>‚Ññ{idx+1}: {lesson['title']}</b>")

    video_id = lesson.get("video_file_id") or lesson.get("video")
    if video_id:
        try:
            await callback.message.answer_video(video_id)
        except Exception:
            await callback.message.answer(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_id}")

    homework = lesson.get('homework') or "-"
    await callback.message.answer(f"<b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {homework}")

    extra_file = lesson.get("extra_material_file")
    extra_link = lesson.get("extra_material_link") or "-"
    if extra_file:
        try:
            await callback.message.answer_document(extra_file)
        except Exception:
            await callback.message.answer(f"–§–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {extra_file}")
    await callback.message.answer(f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª:</b> {extra_link or '-'}")

    await callback.answer()
@dp.callback_query(F.data.startswith("approve_course_"))
async def approve_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[-1])
    approve_course_by_id(course_id)
    await callback.message.edit_text("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    await callback.answer()
@dp.callback_query(F.data.startswith("decline_course_"))
async def decline_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[-1])
    delete_course_and_lessons(course_id)
    await callback.message.edit_text("‚ùå –ö—É—Ä—Å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

@dp.callback_query(F.data.regexp(r"^edit_course_\d+$"))
async def edit_course(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in tuple(ADMINISTRATION.values()):  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    course_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_course_id=course_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_course_info_{course_id}")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data=f"add_lesson_{course_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{course_id}")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫", callback_data=f"choose_lesson_edit_{course_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    try:
        await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –º–µ–Ω—é.", show_alert=False)
        else:
            raise
    await callback.answer()

@dp.callback_query(F.data.regexp(r"^edit_course_info_\d+$"))
async def edit_course_info(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_course_id=course_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_course_title_{course_id}")],
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_course_desc_{course_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_course_{course_id}")]
    ])
    try:
        await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –º–µ–Ω—é.", show_alert=False)
        else:
            raise
    await callback.answer()

class EditCourse(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
@dp.callback_query(F.data.regexp(r"^edit_course_title_\d+$"))
async def edit_course_title(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    course_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_course_id=course_id)    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(EditCourse.waiting_for_title)
@dp.callback_query(F.data.regexp(r"^edit_course_desc_\d+$"))
async def edit_course_desc(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    course_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_course_id=course_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(EditCourse.waiting_for_description)
@dp.message(EditCourse.waiting_for_title)
async def update_course_title_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if "edit_course_id" not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        await state.clear()
        return
    update_course_title(data["edit_course_id"], message.text.strip())
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    course = get_course_by_id(data["edit_course_id"])
    await message.answer(f"<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course['title']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {course['description']}")
    await edit_course_menu(message, data["edit_course_id"])
    await state.clear()
@dp.message(EditCourse.waiting_for_description)
async def update_course_description_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if "edit_course_id" not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        await state.clear()
        return
    update_course_description(data["edit_course_id"], message.text.strip())
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    course = get_course_by_id(data["edit_course_id"])
    await message.answer(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course['title']}\n<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {course['description']}")
    await edit_course_menu(message, data["edit_course_id"])
    await state.clear()

class AddLesson(StatesGroup):
    waiting_for_title = State()
    waiting_for_video = State()
    waiting_for_homework = State()
    waiting_for_extra_material_link = State()
    waiting_for_extra_material_file = State()
@dp.callback_query(F.data.startswith("add_lesson_"))
async def add_lesson_to_course(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in tuple(ADMINISTRATION.values()):
        course_id = int(callback.data.split("_")[-1])
        await state.update_data(add_lesson_course_id=course_id)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
        await state.set_state(AddLesson.waiting_for_title)
    else:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
@dp.message(AddLesson.waiting_for_title)
async def add_lesson_title(message: Message, state: FSMContext):
    await state.update_data(new_lesson_title=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –∏–ª–∏ ¬´-¬ª:")
    await state.set_state(AddLesson.waiting_for_video)
@dp.message(AddLesson.waiting_for_video)
async def add_lesson_video(message: Message, state: FSMContext):
    if message.text and message.text.strip() == "-":
        video = None
    elif message.video:
        video = message.video.file_id
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ ¬´-¬ª.")
        return
    await state.update_data(new_lesson_video=video)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(AddLesson.waiting_for_homework)
@dp.message(AddLesson.waiting_for_homework)
async def add_lesson_homework(message: Message, state: FSMContext):
    await state.update_data(new_lesson_homework=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ ¬´-¬ª:")
    await state.set_state(AddLesson.waiting_for_extra_material_link)
@dp.message(AddLesson.waiting_for_extra_material_link)
async def add_lesson_link(message: Message, state: FSMContext):
    link = message.text.strip()
    if link == "-":
        link = None
    await state.update_data(new_lesson_extra_link=link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (.docx, .pdf) –∏–ª–∏ ¬´-¬ª:")
    await state.set_state(AddLesson.waiting_for_extra_material_file)
@dp.message(AddLesson.waiting_for_extra_material_file)
async def add_lesson_file(message: Message, state: FSMContext):
    if message.document:
        file_id = message.document.file_id
    elif message.text and message.text.strip() == "-":
        file_id = None
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ ¬´-¬ª.")
        return

    data = await state.get_data()
    add_lesson(
        data["add_lesson_course_id"],
        data["new_lesson_title"],
        data["new_lesson_video"],
        data["new_lesson_homework"],
        extra_material_link=data.get("new_lesson_extra_link"),
        extra_material_file=file_id
    )
    await message.answer("–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await edit_course_menu(message, data["add_lesson_course_id"])
    await state.clear()

class AddLessonGlobal(StatesGroup):
    waiting_for_course = State()
@dp.message(Command("add_lesson"))
async def add_lesson_command(message: Message, state: FSMContext):
    if message.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    courses = get_all_courses()
    if not courses:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"add_lesson_choose_{course['id']}")]
            for course in courses
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:", reply_markup=kb)
    await state.set_state(AddLessonGlobal.waiting_for_course)
@dp.callback_query(F.data.startswith("add_lesson_choose_"), AddLessonGlobal.waiting_for_course)
async def add_lesson_choose_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    await state.clear()
    await state.update_data(add_lesson_course_id=course_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
    await state.set_state(AddLesson.waiting_for_title)

@dp.callback_query(F.data.startswith("delete_lesson_"))
async def delete_lesson_from_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    lessons = get_lessons_by_course(course_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=lesson["title"], callback_data=f"confirm_delete_lesson_{lesson['id']}_{course_id}")]
        for lesson in lessons
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_course_{course_id}")]])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^confirm_delete_lesson_\d+_\d+$"))
async def confirm_delete_lesson(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    lesson_id = int(parts[-2])
    course_id = int(parts[-1])
    delete_lesson_by_id(lesson_id)
    await callback.message.answer("–£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω.")
    await edit_course_menu(callback.message, course_id)

class DeleteLessonGlobal(StatesGroup):
    waiting_for_course = State()
    waiting_for_lesson = State()
@dp.message(Command("delete_lesson"))
async def delete_lesson_command(message: Message, state: FSMContext):
    if message.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    courses = get_all_courses()
    if not courses:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"delete_lesson_choose_course_{course['id']}")]
            for course in courses
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:", reply_markup=kb)
    await state.set_state(DeleteLessonGlobal.waiting_for_course)
@dp.callback_query(F.data.startswith("delete_lesson_choose_course_"), DeleteLessonGlobal.waiting_for_course)
async def delete_lesson_choose_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    lessons = get_lessons_by_course(course_id)
    if not lessons:
        await callback.message.edit_text("–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        await state.clear()
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=lesson["title"], callback_data=f"delete_lesson_choose_{lesson['id']}_{course_id}")]
            for lesson in lessons
        ]
    )
    await state.update_data(delete_course_id=course_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteLessonGlobal.waiting_for_lesson)
@dp.callback_query(F.data.startswith("delete_lesson_choose_"), DeleteLessonGlobal.waiting_for_lesson)
async def delete_lesson_choose_lesson(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    lesson_id = int(parts[-2])
    course_id = int(parts[-1])
    delete_lesson_by_id(lesson_id)
    await callback.message.edit_text("–£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω.")
    await state.clear()

class DeleteCourseGlobal(StatesGroup):
    waiting_for_course = State()
@dp.message(Command("delete_course"))
async def delete_course_command(message: Message, state: FSMContext):
    if message.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    courses = get_all_courses()
    if not courses:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"delete_course_choose_{course['id']}")]
            for course in courses
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteCourseGlobal.waiting_for_course)
@dp.callback_query(F.data.startswith("delete_course_choose_"), DeleteCourseGlobal.waiting_for_course)
async def delete_course_choose(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    delete_course_and_lessons(course_id)
    await callback.message.edit_text("–ö—É—Ä—Å –∏ –≤—Å–µ –µ–≥–æ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await state.clear()

class EditLesson(StatesGroup):
    waiting_for_title = State()
    waiting_for_video = State()
    waiting_for_homework = State()
    waiting_for_extra_material_file = State()
    waiting_for_extra_material_link = State()
@dp.callback_query(F.data.startswith("choose_lesson_edit_"))
async def choose_lesson_edit(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in tuple(ADMINISTRATION.values()):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    course_id = int(callback.data.split("_")[-1])
    lessons = get_lessons_by_course(course_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=lesson["title"], callback_data=f"edit_lesson_{lesson['id']}_{course_id}")]
        for lesson in lessons
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_course_{course_id}")]])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^edit_lesson_\d+_\d+$"))
async def edit_lesson(callback: CallbackQuery, state: FSMContext):
    _, _, lesson_id, course_id = callback.data.split("_")
    await state.update_data(edit_lesson_id=int(lesson_id), edit_course_id=int(course_id))
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_lesson_title_{lesson_id}")],
        [InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data=f"edit_lesson_video_{lesson_id}")],
        [InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"edit_lesson_homework_{lesson_id}")],
        [InlineKeyboardButton(text="–§–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞", callback_data=f"edit_lesson_extra_file_{lesson_id}")],
        [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"edit_lesson_extra_link_{lesson_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"choose_lesson_edit_{course_id}")]
    ])
    await callback.message.edit_text("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É—Ä–æ–∫–µ?", reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^edit_lesson_title_\d+$"))
async def edit_lesson_title(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")
    await state.set_state(EditLesson.waiting_for_title)
@dp.callback_query(F.data.regexp(r"^edit_lesson_video_\d+$"))
async def edit_lesson_video(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞:")
    await state.set_state(EditLesson.waiting_for_video)
@dp.callback_query(F.data.regexp(r"^edit_lesson_homework_\d+$"))
async def edit_lesson_homework(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(EditLesson.waiting_for_homework)
@dp.callback_query(F.data.regexp(r"^edit_lesson_extra_file_\d+$"))
async def edit_lesson_extra_file(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:")
    await state.set_state(EditLesson.waiting_for_extra_material_file)
@dp.callback_query(F.data.regexp(r"^edit_lesson_extra_link_\d+$"))
async def edit_lesson_extra_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É:")
    await state.set_state(EditLesson.waiting_for_extra_material_link)


class EditCourseGlobal(StatesGroup):
    waiting_for_course = State()
@dp.message(Command("edit_course"))
async def edit_course_command(message: Message, state: FSMContext):
    if message.from_user.id not in tuple(ADMINISTRATION.values()):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    courses = get_all_courses()
    if not courses:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"edit_course_choose_{course['id']}")]
            for course in courses
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(EditCourseGlobal.waiting_for_course)
@dp.callback_query(F.data.regexp(r"^edit_course_choose_\d+$"), EditCourseGlobal.waiting_for_course)
async def edit_course_choose(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in tuple(ADMINISTRATION.values()):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    course_id = int(callback.data.split("_")[-1])
    await state.clear()
    await edit_course_menu(callback.message, course_id)


@dp.message(EditLesson.waiting_for_title)
async def update_lesson_title_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    update_lesson_title(data["edit_lesson_id"], message.text.strip())
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await edit_lesson_menu(message, data["edit_lesson_id"], data["edit_course_id"])
    await state.clear()
@dp.message(EditLesson.waiting_for_video)
async def update_lesson_video_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if not message.video:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return
    update_lesson_video(data["edit_lesson_id"], message.video.file_id)
    await message.answer("–í–∏–¥–µ–æ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await edit_lesson_menu(message, data["edit_lesson_id"], data["edit_course_id"])
    await state.clear()
@dp.message(EditLesson.waiting_for_homework)
async def update_lesson_homework_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    update_lesson_homework(data["edit_lesson_id"], message.text.strip())
    await message.answer("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await edit_lesson_menu(message, data["edit_lesson_id"], data["edit_course_id"])
    await state.clear()
@dp.message(EditLesson.waiting_for_extra_material_file)
async def update_lesson_extra_material_file_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text and message.text.strip() == "-":
        update_lesson_extra_material_file(data["edit_lesson_id"], None)
        await message.answer("–§–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É–¥–∞–ª—ë–Ω.")
    elif message.document:
        update_lesson_extra_material_file(data["edit_lesson_id"], message.document.file_id)
        await message.answer("–§–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    await edit_lesson_menu(message, data["edit_lesson_id"], data["edit_course_id"])
    await state.clear()
@dp.message(EditLesson.waiting_for_extra_material_link)
async def update_lesson_extra_material_link_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text and message.text.strip() == "-":
        update_lesson_extra_material_link(data["edit_lesson_id"], None)
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω–∞.")
    else:
        update_lesson_extra_material_link(data["edit_lesson_id"], message.text.strip())
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await edit_lesson_menu(message, data["edit_lesson_id"], data["edit_course_id"])
    await state.clear()


@dp.callback_query(F.data == "back_to_courses")
async def back_to_courses(callback: CallbackQuery):
    courses = get_all_courses()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"view_course_{course['id']}")]
            for course in courses
        ]
    )
    try:
        await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:", reply_markup=kb)
    except Exception:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:", reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^edit_course_\d+$"))
async def back_to_edit_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    await edit_course_menu(callback.message, course_id)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^choose_lesson_edit_\d+$"))
async def back_to_choose_lesson_edit(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    await choose_lesson_edit(callback, state)
    await callback.answer()
@dp.callback_query(F.data.regexp(r"^edit_course_info_\d+$"))
async def back_to_edit_course_info(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    await edit_course_menu(callback.message, course_id)
    await callback.answer()

@dp.callback_query(F.data.regexp(r"^delete_lesson_choose_course_\d+$"))
async def back_to_delete_lesson_choose_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[-1])
    lessons = get_lessons_by_course(course_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=lesson["title"], callback_data=f"delete_lesson_choose_{lesson['id']}_{course_id}")]
            for lesson in lessons
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await menu_command(callback.message)
    await callback.answer()
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def fsm_back_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    course_id = data.get("edit_course_id")
    if course_id:
        await edit_course_menu(message, course_id)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def edit_course_menu(message: Message, course_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_course_info_{course_id}")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data=f"add_lesson_{course_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{course_id}")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫", callback_data=f"choose_lesson_edit_{course_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"approve_course_{course_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_course_{course_id}")]
    ])
    try:
        await message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
    except Exception:
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
async def edit_lesson_menu(message: Message, lesson_id: int, course_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_lesson_title_{lesson_id}")],
        [InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data=f"edit_lesson_video_{lesson_id}")],
        [InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"edit_lesson_homework_{lesson_id}")],
        [InlineKeyboardButton(text="–§–∞–π–ª –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª–∞", callback_data=f"edit_lesson_extra_file_{lesson_id}")],
        [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"edit_lesson_extra_link_{lesson_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"choose_lesson_edit_{course_id}")]
    ])
    try:
        await message.edit_text("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É—Ä–æ–∫–µ?", reply_markup=kb)
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

@dp.message(Command("courses"))
async def show_courses(message: Message):
    user_id = message.from_user.id
    if user_id != OWNER_ID and user_id not in ADMIN_IDS.values():
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    courses = get_all_courses()
    if not courses:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course["title"], callback_data=f"view_course_{course['id']}")]
            for course in courses
        ]
    )
    await message.answer("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:", reply_markup=kb)
@dp.callback_query(F.data.regexp(r"^view_lesson_simple_\d+$"))
async def view_lesson_simple(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id != OWNER_ID and user_id not in ADMIN_IDS.values():
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    lesson_id = int(callback.data.split("_")[-1])
    lessons = [lesson for course in get_all_courses() for lesson in get_lessons_by_course(course["id"])]
    lesson = next((l for l in lessons if l["id"] == lesson_id), None)
    if not lesson:
        await callback.message.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = f"<b>{lesson['title']}</b>"
    video_id = lesson.get("video_file_id") or lesson.get("video")
    if video_id:
        try:
            await callback.message.answer_video(video_id)
        except Exception:
            text += f"\n–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_id}"
    text += f"\n\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {lesson.get('homework', '-')}"
    extra_file = lesson.get("extra_material_file")
    extra_link = lesson.get("extra_material_link")
    if extra_file:
        try:
            await callback.message.answer_document(extra_file)
        except Exception:
            text += f"\n–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {extra_file}"
    if extra_link:
        text += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª: {extra_link}"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_courses")]
        ]
    )
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
@dp.callback_query(F.data.regexp(r"^view_course_\d+$"))
async def view_course(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id != OWNER_ID and user_id not in ADMIN_IDS.values():
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    course_id = int(callback.data.split("_")[-1])
    course = get_course_by_id(course_id)
    lessons = get_lessons_by_course(course_id)
    text = f"<b>{course['title']}</b>\n{course['description']}\n\n–£—Ä–æ–∫–∏:"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=lesson["title"], callback_data=f"view_lesson_simple_{lesson['id']}")]
            for lesson in lessons
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_courses")]]
    )
    await callback.message.edit_text(text, reply_markup=kb)



async def main():
    # logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())